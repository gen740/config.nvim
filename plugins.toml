# ┼───────────────────────────────────────────────────────────────────────────────────────┼
# │                                      « Plugins »                                      │
# ┼───────────────────────────────────────────────────────────────────────────────────────┼

[[plugins]] # vim-textobjects 
merged = 0
repo = 'kana/vim-textobj-user'

[[plugins]] # vim textobjects latex
merged = 0
repo = 'rbonvall/vim-textobj-latex'

[[plugins]] # easy align
repo = 'junegunn/vim-easy-align'

[[plugins]] # Comment out
repo = "tpope/vim-commentary"

[[plugins]] # Git Gutter
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_map_keys=0
let g:gitgutter_realtime = 1
"let g:gitgutter_eager = 0
'''

[[plugins]] # vim Sneak
repo = 'justinmk/vim-sneak'

[[plugins]] # vim repeat
repo = 'tpope/vim-repeat'

[[plugins]] # vim surrond
repo = 'tpope/vim-surround'
merged = 0

[[plugins]] # Treesitter
repo = 'nvim-treesitter/nvim-treesitter'

[[plugins]] # Treesitter textobjects
repo = 'nvim-treesitter/nvim-treesitter-textobjects'

[[plugins]] # Treesitter refactor
repo = 'nvim-treesitter/nvim-treesitter-refactor'

[[plugins]] # Gruvbox
repo = 'morhetz/gruvbox'

[[plugins]] # Signature
repo = 'kshenoy/vim-signature'

[[plugins]] # Fugitive
repo = 'tpope/vim-fugitive'

[[plugins]] # Gina
repo = 'lambdalisue/gina.vim'

[[plugins]] # IndentLine
repo = 'yggdroot/indentline'
hook_add = '''
let g:indentLine_color_gui = "#555555"
autocmd FileType tex let g:indentLine_color_gui = "#dddddd"
autocmd BufNewFile,BufRead *.tex hi Statement guifg=#dddddd
" let g:indentLine_char = '┊'
let g:indentLine_char = '│'
let g:indentLine_conceallevel=1
let g:indentLine_concealcursor=""
set conceallevel=1
set concealcursor-=incv
autocmd FileType tex let g:indentLine_enabled=0
'''

#===================================================================================================
# Startify
#===================================================================================================
# [[plugins]]
# repo = 'mhinz/vim-startify'
# hook_add = '''
# let g:startify_custom_header = ['']
# let g:startify_custom_footer = ['', "", '']
# let g:startify_enable_special      = 1
# let g:startify_files_number        = 20
# let g:startify_relative_path       = 1
# let g:startify_change_to_dir       = 1
# let g:startify_update_oldfiles     = 1
# let g:startify_session_autoload    = 1
# let g:startify_session_persistence = 1
# let g:startify_bookmarks = [
#       \ { 'co': '~/.config/nvim'}
#       \ ]
# let g:startify_lists = [
#       \ { 'type': 'files',     'header': ['   MRU']            },
#       \ { 'type': 'sessions',  'header': ['   Sessions']       },
#       \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
#       \ { 'type': 'commands',  'header': ['   Commands']       },
#       \ ]
# " hi StartifyBracket ctermfg=240
# " hi StartifyFile    ctermfg=147
# " hi StartifyFooter  ctermfg=240
# " hi StartifyHeader  ctermfg=114
# " hi StartifyNumber  ctermfg=215
# " hi StartifyPath    ctermfg=245
# " hi StartifySlash   ctermfg=240
# " hi StartifySpecial ctermfg=240
# '''

[[plugins]] # Airline Theme
repo = 'vim-airline/vim-airline-themes'

[[plugins]] # Airline
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#default#layout = [[ 'a', 'b', 'c' ], [ 'x', 'y', 'z']]
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline#extensions#fzf#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#close_symbol = 'X'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter ='default'
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ' '
let g:airline#extensions#tabline#show_close_button = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline_detect_modified=1
let g:airline_left_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_stl_path_style = 'short'
let g:airline_theme = 'minimalist' "''gruvbox'  ubaryd, understated violet solalized
set laststatus=2                " 下のステータスライン
set noshowmode                  " デフォルトのステータスラインを消す
set showtabline=2
set statusline=2                " ステータスラインの記述
'''

[[plugins]] # Snippets
repo = 'honza/vim-snippets'
merged = 0

[[plugins]] # Fern
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#renderer = "nerdfont"
autocmd Filetype fern setlocal nonu norelativenumber
function! s:init_fern() abort
  nmap <buffer> n <Plug>(fern-action-new-path)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> m <Plug>(fern-action-move)
endfunction
augroup my-fern
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
'''

[[plugins]] # Nerd Font
repo = 'lambdalisue/nerdfont.vim'

[[plugins]] # Fern Nerd Font
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]] # Fern fzf
repo = 'LumaKernel/fern-mapping-fzf.vim'
depends = ['fzf', 'fern.vim']

[[plugins]] # Fern Git Status
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]] # Fern Git Mapping
repo = 'lambdalisue/fern-mapping-git.vim'

[[plugins]] # Fern Bookmarks
repo = 'lambdalisue/fern-bookmark.vim'

[[plugins]] # Fern Hijack
repo = 'lambdalisue/fern-hijack.vim'

[[plugins]] # Devicon
repo = 'ryanoasis/vim-devicons'

[[plugins]] # Fzf Preview
repo = 'yuki-yano/fzf-preview.vim'
merged = 0
rev = 'release/rpc'
depends = ['fzf', 'fzf.vim']
hook_add = '''
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,
  \ 'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }
let g:fzf_preview_default_fzf_options = { '--reverse': v:true, '--preview-window': 'wrap' }
" let g:fzf_preview_direct_window_option = ''
" let g:fzf_preview_floating_window_rate = 0.95
let g:fzf_preview_if_binary_command = '[[ "$(file --mime {})" =~ binary ]]'
let g:fzf_binary_preview_command = 'echo "{} is a binary file"'
let g:fzf_preview_buffers_jump = 1
let g:fzf_preview_cache_directory = expand('~/.cache/vim/fzf_preview')
let g:fzf_preview_command = 'bat --color=always --theme=gruvbox-dark --plain {-1}'
let g:fzf_preview_dev_icon_prefix_string_length = 3
let g:fzf_preview_dev_icons_limit = 5000
let g:fzf_preview_directory_files_command = 'fd --hidden --follow --exclude .git'
let g:fzf_preview_fzf_color_option = 'border:#aaaaaa,pointer:#ffffff,bg+:#006400'
let g:fzf_preview_git_files_command = 'git ls-files --exclude-standard'
let g:fzf_preview_git_status_command = 'git -c color.status=always status --short --untracked-files=all'
let g:fzf_preview_grep_cmd = 'rg --line-number --no-heading --color=never'
let g:fzf_preview_grep_preview_cmd = expand('<sfile>:h:h') . '/bin/preview_fzf_grep'
let g:fzf_preview_lines_command = 'bat --color=always --theme=gruvbox-dark --plain --number' " Installed bat
let g:fzf_preview_mru_limit = 1000
let g:fzf_preview_quit_map = 1
let g:fzf_preview_use_dev_icons = 1
'''

[[plugins]] # Fzf
repo = 'junegunn/fzf.vim'
merged = 0

[[plugins]] # Fzf Oprgitnal
repo = 'junegunn/fzf'
merged = 0
build = './install --all'

[[plugins]] # Popup [Telescope Dependancies]
repo = 'nvim-lua/popup.nvim'

[[plugins]] # Plenary [Telescope Dependancies]
repo = 'nvim-lua/plenary.nvim'

[[plugins]] # Telescope
repo ='nvim-telescope/telescope.nvim'

[[plugins]] # Coc
repo = 'neoclide/coc.nvim'
merged = 0
hook_add = '''
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
'''
